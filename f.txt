import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
 
from sklearn.linear_model import LogisticRegression
 
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
 
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.preprocessing import StandardScaler







data=pd.read_csv("spine_dataset.csv")


data.info()


 
data.Class_att.unique()


data=data.drop('Unnamed: 13',axis=1)


data.head()


data.rename(columns={
    "Col1":"pelvic_incidence",
    "Col2":"pelvic tilt",
    "Col3":"lumbar_lordosis_angle",
    "Col4":"sacral_slope",
    "Col5":"pelvic_radius",
    "Col6":"degree_spondylolisthesis",
    "Col7":"pelvic_slope",
    "Col8":"Direct_tilt",
    "Col9":"thoracic_slope",
    "Col10":"cervical_tilt",
    "Col11":"sacrum_angle",
    "Col12":"scoliosis_slope",
    "Class_att":"variable"
},inplace=True)



data["variable"].value_counts().sort_index().plot.bar()




 
from sklearn.preprocessing import LabelEncoder
label=LabelEncoder().fit_transform(data['variable'])
data.drop("variable",axis=1,inplace=True)
data["Condition"]=label



data=data.drop(['pelvic_slope','Direct_tilt','thoracic_slope','cervical_tilt','sacrum_angle','scoliosis_slope'],axis=1)



y=data.Condition
X=data.drop("Condition",axis=1)


X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)



 
from sklearn.metrics import accuracy_score
acc_list=[]
model_list=[]
for model in [LogisticRegression,DecisionTreeClassifier,RandomForestClassifier,GradientBoostingClassifier,SVC]:
    classifier=model().fit(X_train,y_train)
    %time predictions=classifier.predict(X_test)
    model_list.append((model).__name__)
    acc_list.append(accuracy_score(predictions,y_test))


results=pd.DataFrame({ 'ML Model': model_list,    
    'Test Accuracy': acc_list})
results


results.sort_values(by=['Test Accuracy'], ascending=False)


 
sns.barplot(x=results["ML Model"],y=results["Test Accuracy"],data=results)
plt.xticks(rotation=-75)
plt.ylim(0.5,1)



 
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
km=KMeans(n_clusters=2,random_state=42)
km.fit_predict(X_train)
score=silhouette_score(X_train,km.labels_,metric='euclidean')
print('Silhouette_score:%.3f'%score)


pip install yellowbrick



from yellowbrick.cluster import SilhouetteVisualizer
fig,ax=plt.subplots(2,2,figsize=(15,8))
for i in [2,3,4,5]:
    #Kmeans instances for different clusters
    km=KMeans(n_clusters=i,random_state=42)
    q,mod=divmod(i,2)
    #Create SilhoutteVisualizer with KMeans instance
    visualizer=SilhouetteVisualizer(km,colors='yellowbrick',ax=ax[q-1][mod])
    visualizer.fit(X_train)